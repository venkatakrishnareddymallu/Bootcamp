(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.g1 = global.g1 || {})));
}(this, (function (exports) { 'use strict';

var version = "0.16.2";

var template_dropdown = "<% var urlfilterClass = key ? 'urlfilter' : '',\nmultiple = multiple ? 'multiple' : '',\nkey = key ? key : '' %> <select class=\"selectpicker border <%- urlfilterClass %>\" id=\"<%- key %>\" <%-multiple%>></select>";
var template_dropdown_options = "<% _.each(data, function(item) { %> <option value=\"<%- item %>\"><%- item %></option> <% }) %>";
var template_dropdown_object = "<% _.each(data, function(item) { %> <option value=\"<%- item[value_key] %>\" label=\"<%- item[label_key] %>\"><%- item[label_key] %></option> <% }) %>";
var template_error = "<div class=\"alert alert-warning\" role=\"alert\"><p class=\"text-center\"> <%- message %> </p></div>";

var default_templates = Object.freeze({
	template_dropdown: template_dropdown,
	template_dropdown_options: template_dropdown_options,
	template_dropdown_object: template_dropdown_object,
	template_error: template_error
});

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!options.isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		} else {
			destination[key] = deepmerge(target[key], source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

var default_options = {
  target: '',
  multiple: false,
  value_key: 'value',
  label_key: 'label'
};

function dropdown(js_options) {
  var self = $(this);
  var options = deepmerge_1(default_options, js_options);

  self.html(_.template(template_dropdown)(options));

  if (options.data) {
    render(options.data);
    // Set the default
    if (options.value)
      self.find('.selectpicker').val(options.value).selectpicker('refresh');
    // trigger 'load' event
    self.trigger({type: 'load'});
  }
  else if (options.url) {
    render(['Loading...']);
    $.ajax(options.url)
      .fail(function(xhr, status, message) {
        // load error template
        self.html(_.template(template_error)({message: message}));
      })
      .done(function(response) {
        render(response);
        self.find('.selectpicker').selectpicker('refresh');
        self.trigger({type: 'load'});
      });
  }

  function render(data) {
    options.data = data;
    if (options.key) {
      // urlfilter
      self.urlfilter({
        selector: 'select.urlfilter',
        target: options.target,
        event: 'change',
        remove: true
      });
    }
    // re-render dropdown template options with fetched data
    var template = typeof data[0] == 'object' ? 'template_dropdown_object' : 'template_dropdown_options';
    self.find('.selectpicker')
      .html(_.template(default_templates[template])(options))
      .selectpicker(options.options);
  }

  return this
}

if (typeof jQuery != 'undefined') {
  jQuery.extend(jQuery.fn, {
    dropdown: dropdown
  });
}

exports.version = version;

Object.defineProperty(exports, '__esModule', { value: true });

})));
