/*
## scale

Converts a configuration into a d3 scale function. This is used to extract a
different value for each data point. For example:

```js
var color_scale = g1.scale({
  metric: 'age',
  scheme: 'RdYlGn'
}, data)
// Returns a color scale that maps the age column to the red - yellow - green color scheme
```

### scale attributes

- metric can be one of:
  - string: column name
  - `function(d, i)` that returns a value for each item in the data
- scheme: color scheme to interpolate to
- scale: d3 scale to use. Defaults to linear
- range: set the range of the scale
- domain: override the domain (which defaults to the extent of the data metric)
*/

export {scale}

function scale (data, config) {
  return function(val) {
    var result, scale, color

    var metricFormula = typeof config.metric == 'function' ? config.metric
      : function(d) { return d[config.metric]}

    if (config.scheme) {
      color = config.scheme
      if (color.lastIndexOf('scheme', 0) !== 0) {
        color = 'interpolate' + color
      }
    }

    if (config.scale) {
      scale = config.scale.replace(/\w+/g,
        function(w){
          return w[0].toUpperCase() + w.slice(1).toLowerCase()
        })
    } else if (color) {
      scale = 'Sequential'
    } else {
      scale = 'Linear'
    }

    var domain = config.domain || d3.extent(data, metricFormula)
    if (color) {
      result = d3['scale' + scale](d3[color])
        .domain(domain)
    } else if (config.range) {
      result = d3['scale' + scale]()
        .domain(domain)
        .range(config.range)
    }

    return result(metricFormula(val))
  }
}
